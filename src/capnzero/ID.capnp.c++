// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: ID.capnp

#include "ID.capnp.h"

namespace capnp {
namespace schemas {
static const ::capnp::_::AlignedData<54> b_db5d1b772dc860ab = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    171,  96, 200,  45, 119,  27,  93, 219,
     18,   0,   0,   0,   1,   0,   1,   0,
    190, 251, 215, 215, 148, 230, 200, 241,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 170,   0,   0,   0,
     29,   0,   0,   0,  39,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     53,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 122, 101, 114, 111,
     47,  73,  68,  46,  99,  97, 112, 110,
    112,  58,  73,  68,   0,   0,   0,   0,
      8,   0,   0,   0,   1,   0,   1,   0,
    177, 180, 173, 166, 208,  74, 193, 217,
      9,   0,   0,   0,  74,   0,   0,   0,
    145,  93, 188, 239,  25,  35, 217, 242,
      9,   0,   0,   0,  42,   0,   0,   0,
    119, 105, 108, 100,  99,  97, 114, 100,
      0,   0,   0,   0,   0,   0,   0,   0,
    117, 117, 105, 100,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     36,   0,   0,   0,   3,   0,   1,   0,
     48,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     40,   0,   0,   0,   3,   0,   1,   0,
     52,   0,   0,   0,   2,   0,   1,   0,
    118,  97, 108, 117, 101,   0,   0,   0,
     13,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    116, 121, 112, 101,   0,   0,   0,   0,
      6,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      6,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_db5d1b772dc860ab = b_db5d1b772dc860ab.words;
#if !CAPNP_LITE
static const uint16_t m_db5d1b772dc860ab[] = {1, 0};
static const uint16_t i_db5d1b772dc860ab[] = {0, 1};
const ::capnp::_::RawSchema s_db5d1b772dc860ab = {
  0xdb5d1b772dc860ab, b_db5d1b772dc860ab.words, 54, nullptr, m_db5d1b772dc860ab,
  0, 2, i_db5d1b772dc860ab, nullptr, nullptr, { &s_db5d1b772dc860ab, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<24> b_d9c14ad0a6adb4b1 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    177, 180, 173, 166, 208,  74, 193, 217,
     21,   0,   0,   0,   4,   0,   0,   0,
    171,  96, 200,  45, 119,  27,  93, 219,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 242,   0,   0,   0,
     33,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     28,   0,   0,   0,   3,   0,   1,   0,
     40,   0,   0,   0,   2,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 122, 101, 114, 111,
     47,  73,  68,  46,  99,  97, 112, 110,
    112,  58,  73,  68,  46, 119, 105, 108,
    100,  99,  97, 114, 100,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      6,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      6,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_d9c14ad0a6adb4b1 = b_d9c14ad0a6adb4b1.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_d9c14ad0a6adb4b1 = {
  0xd9c14ad0a6adb4b1, b_d9c14ad0a6adb4b1.words, 24, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_d9c14ad0a6adb4b1, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<24> b_f2d92319efbc5d91 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    145,  93, 188, 239,  25,  35, 217, 242,
     21,   0,   0,   0,   4,   0,   0,   0,
    171,  96, 200,  45, 119,  27,  93, 219,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 210,   0,   0,   0,
     33,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     28,   0,   0,   0,   3,   0,   1,   0,
     40,   0,   0,   0,   2,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 122, 101, 114, 111,
     47,  73,  68,  46,  99,  97, 112, 110,
    112,  58,  73,  68,  46, 117, 117, 105,
    100,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      6,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      6,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_f2d92319efbc5d91 = b_f2d92319efbc5d91.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_f2d92319efbc5d91 = {
  0xf2d92319efbc5d91, b_f2d92319efbc5d91.words, 24, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_f2d92319efbc5d91, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
}  // namespace schemas
}  // namespace capnp

// =======================================================================================

namespace capnzero {

// ID
constexpr uint16_t ID::_capnpPrivate::dataWordSize;
constexpr uint16_t ID::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind ID::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* ID::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

#ifndef _MSC_VER
constexpr  ::uint8_t ID::WILDCARD;
#endif
#ifndef _MSC_VER
constexpr  ::uint8_t ID::UUID;
#endif

}  // namespace

